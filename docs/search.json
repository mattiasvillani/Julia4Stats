[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julia for Statistics - a tutorial",
    "section": "",
    "text": "Star\n\nAim\nThis tutorial introduces the Julia programming language and its use for statistical analysis. The following topics will be covered:\n\nintroduction to the Julia programming language\nthe package manager and tooling\nmanaging data in Julia\nplots for statistics\nstatistical distributions and tools\nlikelihood inference using numerical optimization\nprobabilistic programming for statistical inference using Turing.jl\n\n\n\nTeacher\n\nMattias Villani Professor of Statistics Stockholm University\n\n\nWorkshop plan and schedule\n\nLecture 1 - The Julia programming language and tooling Time: 14.00-15.00  Reading: Installing Julia and first try in REPL \nüçé leg stretcher\nLecture 2 - Managing data and plotting Time: 15.00-16.00  Reading: Slides \n‚òï tea break\nLecture 3 - Statistical distributions, optimization and automatic differentiation Time: 16.30-17.30  Reading: Slides \nüçì leg stretcher\nLecture 4 - Probabilistic programming using Turing.jl Time: 17.30-18.30  Reading: Slides\n\nJulia and Turing\n Install Julia  Install VS Code  Install Julia extension for VS Code | Guided Youtube video | Documentation  Install and get started with Turing.jl | Turing tutorials"
  },
  {
    "objectID": "slides/install.html",
    "href": "slides/install.html",
    "title": "Installing Julia and VS Code",
    "section": "",
    "text": "The recommended way to install Julia is using a little tool called juliaup . Benefits of juliaup :\n\nmakes the install really easy\nallows you to switch between different versions of Julia\nnotifies when a new version is available\n\nInstructions on how to install juliaup are here. In short:\n\nOn Mac/Linux: run the following command in terminal:\ncurl -fsSL https://install.julialang.org | sh\nOn Windows, type this in the terminal to install from Windows store:\nwinget install --name Julia --id 9NJNWW8PVKMN -e -s msstore\n\n\n\n\n\n\n\nAvoid Linux repositories\n\n\n\nIt is not recommended to install Julia from repositories on Linux since the versions there can be rather old.\n\n\n\n\n\n\n\n\nUninstall juliaup\n\n\n\nJuliaup can be uninstalled with the terminal command: juliaup self uninstall\n\n\nJulia can now be started by typing julia in the terminal (you may need to restart the shell/terminal so your system can find it). You should see something like:\n\nThis what is known as the console in the R world. In Julia we tend to call it the REPL (Read-Evaluate-Print Loop). We will soon use VS Code as our main working environment (IDE, similar to RStudio, but much more general). But let‚Äôs take a first dive in Julia directly in the REPL."
  },
  {
    "objectID": "slides/install.html#the-package-manager-a-first-look",
    "href": "slides/install.html#the-package-manager-a-first-look",
    "title": "Installing Julia and VS Code",
    "section": "The package manager: a first look",
    "text": "The package manager: a first look\nSimilar, but more extreme than R, most things in Julia are available in packages. Packages are typically named with a .jl ending, for example the Distributions.jl package contain many statistical distributions. Julia packages are hosted on GitHub and managed by the Julia General Registry.\nThe package manager is most easily accessed by typing ] to get into Pkg mode. The prompt changes to (@v.11) pkg&gt; which means that you are in package mode in the default environment v.11 (if you are using Julia 1.11, more on environments later). Some useful commands in Pkg mode:\n\nstatus, shows the packages installed in the currently active environment\nadd PkgName (installs the PkgName.jl package, for example Distributions.jl)\nrm PkgName (removes the PkgName.jl package)\n\nHere is comparison of package handling in R, Julia and Python.\n\n\n\n\n\n\n\n\n\n\n\n\nLanguage\n\nRepository\n\nInstall packages\n\nUse packages\n\n\nR\n\nCRAN (Comprehensive R Archive Network)\n\ninstall.packages(\"pkgname\")\n\nlibrary(pkgname)\n\n\nJulia\n\nGeneral registry (hosted on GitHub)\n\n] add PkgName\n\nusing PkgName\n\n\nPython\n\nPyPI (Python Package Index)\nor Conda\n\npip install pkgname\n\nimport pkgname as pk\n\n\n\nOnce a package has been added it can be used from the Julian prompt (just backspace out from Pkg mode) with the using command: using PkgName . This loads the package in memory and its functions and other objects can now be used.\nThere are other ways to use a package, like import. The main difference is that\n\nusing exposes all exported function directly without needing to call then with the package name as prefix, e.g.¬†myfunc(3).\nimport does not expose exported function directly and requires a call to function to be prefixed with the package name, e.g.¬†PkgName.myfunc(3). This is closer to Python‚Äôs namespace convention, but namespaces are less essential in Julia due to multiple dispatch and Julias clever handling of function (method) name collisions.\nIt is also possible to use only specific functions from a package: using PkgName: myfunc, otherfunc.\n\n\n\n\n\n\n\nExercise\n\n\n\n\nAdd the Distributions.jl package in the package manager. Type status after install to see that it indeed was added.\nUse the Distributions.jl package by the using command from the Julian prompt.\nUse the package to define a normal distribution object with mean 2 and and standard deviation 3. Go into help mode and search for Normal to see how this is done. Call the new object dist.\nGenerate 10 random draws from this normal distribution using the rand function on the normal distribution object dist.\nEvaluate the pdf of this normal at x=1 using the pdf function on the normal distribution object dist."
  }
]