{
  "hash": "c6a6704a0ebff25c7d92d5991bd17ead",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Installing Julia and VS Code\"\nauthor: \"Mattias Villani\" \neditor: visual\n---\n\n## Installing Julia\n\nThe recommended way to install Julia is using a little tool called `juliaup` . Benefits of `juliaup` :\n\n-   easy install of Julia\n\n-   allows you to switch between different versions of Julia (see `juliaup --help`)\n\n-   notifies when a new Julia version is available.\n\nInstructions on how to install juliaup are [here](https://julialang.org/install/). In short:\n\n-   ![](figs/linux.png){width=\"20\"} **Linux**: run the following command in terminal:\n\n    ``` bash\n    curl -fsSL https://install.julialang.org | sh\n    ```\n\n-   ![](figs/mac.png){width=\"25\"}**Mac**: run the following command in terminal:\n\n    ``` bash\n    curl -fsSL https://install.julialang.org | sh\n    ```\n\n-   ![](figs/windows.png){width=\"20\"} **Windows**, type this in the terminal to install from Windows store:\n\n    ``` bash\n    winget install --name Julia --id 9NJNWW8PVKMN -e -s msstore\n    ```\n\n::: callout-warning\n## Avoid Linux repositories\n\nIt is not recommended to install Julia from repositories on Linux since the versions there can be rather old.\n:::\n\n::: callout-tip\n## Uninstall juliaup\n\nJuliaup can be uninstalled with the terminal command: `juliaup self uninstall`\n:::\n\nJulia can now be started by typing `julia` in the terminal (you may need to restart the shell/terminal so your system can find it). You should see something like this:\n\n![](figs/juliastart.png)\n\nThis what is known as the console in the R world. In Julia we tend to call it the **REPL** (Read-Evaluate-Print Loop). We will soon use VS Code as our main working environment (IDE, similar to RStudio, but much more general). But let's take a first dive in Julia directly in the REPL.\n\n## The Julia REPL (console)\n\nThe REPL can be used to evaluate commands as in any interpreted language.\n\nOld commands can be found quite nicely in the REPL:\n\n-   arrow-up and arrow-down goes back in command history. Typing, for example, `myf` and then arrow-up cycles old commands that start with `myf`. Ctrl+r gives more advanced reverse-search.\n\n-   past commands can be edited and re-used.\n\n![](figs/navigateREPL.gif){width=\"500\"}\n\nThe REPL has several prompt modes, for example:\n\n-   **Julian mode**, which is the default seen above.\n\n-   **Help mode**, activated by typing **?** at the prompt. The prompt changes to `help?>` and you can search for documentation about functions etc. Backspace takes you back to Julian mode.\n\n-   **Shell mode**, activated by typing a semicolon **;**. The prompt changes to `shell>` and you can use the usual shell commands for navigating directories, copying files etc. (On Windows, type `powershell` or `cmd` at `shell>` to get access to the shell).\n\n-   **Pkg mode**, activated by typing a right bracket **\\]**. This opens the package manager where Julia packages are added and managed.\n\n-   **Search mode**, activated by `ctrl+r`, as explained above.\n\n-   **R mode**. Later, when discuss how R and Julia can work together with the RCall.jl package, there will an R mode available by typing **\\$** which opens an R prompt. More later.\n\n    ![](figs/REPLmodes.gif){width=\"500\"}\n\nUseful keys bindings ([here](https://docs.julialang.org/en/v1/stdlib/REPL/#Key-bindings) are many more):\n\n-   Ctrl + C to interupt execution\n\n-   Ctrl + L to clear the REPL\n\n## The package manager: a first look\n\nSimilar to R, but a bit more extreme, most things in Julia are available in packages. Packages are typically named with a .jl ending, for example the *Distributions.jl* package contains many statistical distributions. Julia packages are hosted on GitHub and managed by the Julia **General Registry**.\n\nHere are some of the most common packages for Statistics:\n\n-   [Statistics.jl](https://docs.julialang.org/en/v1/stdlib/Statistics/) (mean, variance, quantile etc)\n\n-   [Distributions.jl](https://juliastats.org/Distributions.jl/stable/) (most standard statistical distributions, with rand, pdf, cdf etc)\n\n-   [LinearAlgebra.jl](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/)\n\n-   [DataFrames.jl](https://dataframes.juliadata.org/stable/) (tabular data manipulation)\n\n-   [Tidier.jl](https://tidierorg.github.io/Tidier.jl/dev/) (R's tidyverse, Julia-style)\n\n-   [Plots.jl](https://docs.juliaplots.org/stable/) (one of the most widely used plotting systems)\n\n-   [Optim.jl](https://julianlsolvers.github.io/Optim.jl/stable/) (numerical optimization)\n\n-   [GLM.jl](https://juliastats.org/GLM.jl/v0.11/) (generalized linear models using R's formula syntax)\n\n-   [Turing.jl](https://turinglang.org/) (probabilistic programming, similar to Stan)\n\n-   [RCall.jl](https://juliainterop.github.io/RCall.jl/stable/) (using R code in Julia)\n\n-   [DifferentiationInterface.jl](https://juliadiff.org/DifferentiationInterface.jl/DifferentiationInterface/stable/) (interface to Julia's many autodiff libraries)\n\n-   [RDatasets.jl](https://github.com/JuliaStats/RDatasets.jl) (the R datasets that we all love, in Julia)\n\nThe package manager is most easily accessed by typing `]` to get into Pkg mode. The prompt changes to `(@v.11) pkg>` which means that you are in package mode in the default environment v.11 (if you are using Julia 1.11, more on environments later).\n\nSome useful commands in Pkg mode:\n\n-   `status`, shows the packages installed in the currently active environment\n\n-   `add` `PkgName` (installs the PkgName.jl package, for example Distributions.jl)\n\n-   `rm` `PkgName` (removes the PkgName.jl package)\n\n-   `update` (checks registry and updates packages)\n\nWhen we write, for example, `] add Distributions` we mean to type `]` and then `add Distributions` on the Pkg prompt.\n\nHere is comparison of package handling in R, Julia and Python.\n\n+------------+--------+----------------------------------------+--------+-------------------------------+--------+------------------------------+\n| Language   |        | Repository                             |        | Install packages              |        | Use packages                 |\n+------------+--------+----------------------------------------+--------+-------------------------------+--------+------------------------------+\n| **R**      |        | CRAN (Comprehensive R Archive Network) |        | `install.packages(\"pkgname\")` |        | `library(pkgname)`           |\n+------------+--------+----------------------------------------+--------+-------------------------------+--------+------------------------------+\n| **Julia**  |        | General registry (hosted on GitHub)    |        | `] add PkgName`               |        | `using` `PkgName`            |\n|            |        |                                        |        |                               |        |                              |\n|            |        |                                        |        |                               |        | `import PkgName`             |\n|            |        |                                        |        |                               |        |                              |\n|            |        |                                        |        |                               |        | `import PkgName: myfunc`     |\n+------------+--------+----------------------------------------+--------+-------------------------------+--------+------------------------------+\n| **Python** |        | **PyPI** (Python Package Index)\\       |        | `pip install pkgname`         |        | `from pkgname import *`      |\n|            |        | or **Conda**                           |        |                               |        |                              |\n|            |        |                                        |        | `conda install pkgname`       |        | `import pkgname as pk`       |\n|            |        |                                        |        |                               |        |                              |\n|            |        |                                        |        |                               |        | `from pkgname import myfunc` |\n+------------+--------+----------------------------------------+--------+-------------------------------+--------+------------------------------+\n\nOnce a package has been `add`ed it can be used from the Julian prompt (just `backspace` out from Pkg mode) with the using command: `using PkgName` . This loads the package in memory and its functions and other objects can now be used.\n\nThere are other ways to use a package, like `import`. The main difference is that\n\n-   `using` exposes all exported function directly without needing to call then with the package name as prefix, e.g. `myfunc(3)`.\n\n-   `import` does not expose exported function directly and requires a call to function to be prefixed with the package name, e.g. `PkgName.myfunc(3)`. This is closer to Python's namespace convention, but namespaces are less essential in Julia due to multiple dispatch and Julias clever handling of function (method) name collisions.\n\n-   It is also possible to use only specific functions from a package: `using PkgName: myfunc, otherfunc`.\n\n    Here is comparison of package handling in R, Julia and Python.\n\n    +------------+---------+----------------------------------------+---------+-------------------------------+---------+------------------------------+\n    | Language   |         | Repository                             |         | Install packages              |         | Use packages                 |\n    +------------+---------+----------------------------------------+---------+-------------------------------+---------+------------------------------+\n    | **R**      |         | CRAN (Comprehensive R Archive Network) |         | `install.packages(\"pkgname\")` |         | `library(pkgname)`           |\n    +------------+---------+----------------------------------------+---------+-------------------------------+---------+------------------------------+\n    | **Julia**  |         | General registry (hosted on GitHub)    |         | `] add PkgName`               |         | `using` `PkgName`            |\n    |            |         |                                        |         |                               |         |                              |\n    |            |         |                                        |         |                               |         | `import PkgName`             |\n    |            |         |                                        |         |                               |         |                              |\n    |            |         |                                        |         |                               |         | `import PkgName: myfunc`     |\n    +------------+---------+----------------------------------------+---------+-------------------------------+---------+------------------------------+\n    | **Python** |         | **PyPI** (Python Package Index)\\       |         | `pip install pkgname`         |         | `from pkgname import *`      |\n    |            |         | or **Conda**                           |         |                               |         |                              |\n    |            |         |                                        |         | `conda install pkgname`       |         | `import pkgname as pk`       |\n    |            |         |                                        |         |                               |         |                              |\n    |            |         |                                        |         |                               |         | `from pkgname import myfunc` |\n    +------------+---------+----------------------------------------+---------+-------------------------------+---------+------------------------------+\n\n::: {.callout-important appearance=\"simple\"}\n## Exercise\n\n-   `Add` the Distributions.jl package in the package manager. Type `status` after install to see that it indeed was added.\n\n-   Use the Distributions.jl package by the `using` command from the Julian prompt.\n\n-   Use the package to define a normal distribution object with mean 2 and and standard deviation 3. Go into help mode and search for `Normal` to see how this is done. Call the new object `dist`.\n\n-   Generate 10 random draws from this normal distribution using the `rand` function on the normal distribution object `dist`.\n\n-   Evaluate the pdf of this normal at `x=1` using the `pdf` function on the normal distribution object `dist`.\n:::\n\n## VS code - the working environment (IDE)\n\nWe can write Julia code in any text editor and then execute it in the terminal with the julia command. Here is a small Julia example program (plotfunc.jl) that plots the square function using the Plots.jl package (which needs to added first) and save the graph to a pdf file.\n\n``` julia\n# adding Plots.jl package programatically (needed if it is not already installed)\nimport Pkg; Pkg.add(\"Plots\")\nusing Plots\n\n# Define the function that does the work \nfunction plotfunction(func, a, b)\n  xgrid = range(a, b, length = 100)\n  plt = plot(xgrid, func.(xgrid), color = :blue, xlabel = \"x\", ylabel = \"f(x)\")\n  return plt\nend\n\n# Use the function to produce the plot\nplt = plotfunction(x -> x^2, -2, 2) # x -> x^2 defines an anonymous function\n\n# save plot to file\nsavefig(plt, \"myplot.pdf\")\n```\n\nWe can run this code in terminal with the command\n\n```{bash}\njulia plotfunc.jl\n```\n\n",
    "supporting": [
      "install_files"
    ],
    "filters": [],
    "includes": {}
  }
}